// function solution(k, m, score) {
//     1. [{ totalPrice : [1,2,3] }] => return sum of total price 
//     2. [[],[],[]] => arr.filter((el.sort()) => el[0] * k)
//     3. sort 해서 위에서 3개씩 자르기 X

//     날먹 풀이 안통함..
//     score = score.sort((a,b) => b - a)
//     const scoreLength = Math.floor(score.length / m)
//     let profit = 0

//     for(let i = 0; i < scoreLength; i++){
//         profit += Math.min(...score.splice(0,m)) * m
//     }

//     return profit
// }

// 테스트 1 〉	통과 (0.18ms, 33.5MB)
// 테스트 2 〉	통과 (0.06ms, 33.6MB)
// 테스트 3 〉	통과 (0.25ms, 33.5MB)
// 테스트 4 〉	통과 (0.09ms, 33.5MB)
// 테스트 5 〉	통과 (0.11ms, 33.4MB)
// 테스트 6 〉	통과 (894.97ms, 40MB)
// 테스트 7 〉	통과 (603.56ms, 38.2MB)
// 테스트 8 〉	통과 (7.44ms, 36MB)
// 테스트 9 〉	통과 (612.81ms, 38.2MB)
// 테스트 10 〉	통과 (390.04ms, 39.1MB)
// 테스트 11 〉	실패 (시간 초과)
// 테스트 12 〉	실패 (시간 초과)
// 테스트 13 〉	실패 (시간 초과)
// 테스트 14 〉	실패 (시간 초과)
// 테스트 15 〉	실패 (시간 초과)
// 테스트 16 〉	통과 (0.10ms, 33.5MB)
// 테스트 17 〉	통과 (0.06ms, 33.5MB)
// 테스트 18 〉	통과 (0.16ms, 33.5MB)
// 테스트 19 〉	통과 (0.15ms, 33.6MB)
// 테스트 20 〉	통과 (0.15ms, 33.5MB)
// 테스트 21 〉	통과 (0.07ms, 33.4MB)
// 테스트 22 〉	통과 (0.06ms, 33.4MB)
// 테스트 23 〉	통과 (0.06ms, 33.4MB)
// 테스트 24 〉	통과 (0.08ms, 33.5MB)


function solution(k, m, score) {
    // splice 매서드를 사용하지 않고 score[minIdx]만 조회하는 방법으로 최적화
    score.sort((a, b) => b - a);

    let profit = 0;
    let minIdx = m - 1;

    for (let i = 0; i < Math.floor(score.length / m); i++) {
        profit += score[minIdx] * m;
        minIdx += m;
    }
    return profit;
}

// 테스트 1 〉	통과 (0.21ms, 33.5MB)
// 테스트 2 〉	통과 (0.09ms, 33.5MB)
// 테스트 3 〉	통과 (0.17ms, 33.5MB)
// 테스트 4 〉	통과 (0.10ms, 33.5MB)
// 테스트 5 〉	통과 (0.11ms, 33.6MB)
// 테스트 6 〉	통과 (19.72ms, 39.5MB)
// 테스트 7 〉	통과 (19.53ms, 37.8MB)
// 테스트 8 〉	통과 (4.63ms, 35.9MB)
// 테스트 9 〉	통과 (17.02ms, 38MB)
// 테스트 10 〉	통과 (13.67ms, 39MB)
// 테스트 11 〉	통과 (286.25ms, 83.4MB)
// 테스트 12 〉	통과 (234.22ms, 84MB)
// 테스트 13 〉	통과 (232.36ms, 83.4MB)
// 테스트 14 〉	통과 (286.32ms, 82.7MB)
// 테스트 15 〉	통과 (299.47ms, 82.5MB)
// 테스트 16 〉	통과 (0.08ms, 33.3MB)
// 테스트 17 〉	통과 (0.06ms, 33.5MB)
// 테스트 18 〉	통과 (0.18ms, 33.6MB)
// 테스트 19 〉	통과 (0.22ms, 33.5MB)
// 테스트 20 〉	통과 (0.24ms, 33.5MB)
// 테스트 21 〉	통과 (0.10ms, 33.4MB)
// 테스트 22 〉	통과 (0.09ms, 33.5MB)
// 테스트 23 〉	통과 (0.06ms, 33.5MB)
// 테스트 24 〉	통과 (0.09ms, 33.6MB)