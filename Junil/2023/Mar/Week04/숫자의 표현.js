function solution(n) {
    // 약수의 규칙 : n의 약수들중 홀수개의 개수만큼 식이 나온다
    let count = 0
    let divisors = [];
    for (let i = 1; i <= n / 2; i++) {
        if (n % i === 0) divisors.push(i)
    }
    divisors.push(n)

    for (let j = 0; j < divisors.length; j++) {
        if (divisors[j] % 2 !== 0) {
            count++
        }
    }
    return count
}

// 테스트 1 〉	통과 (0.04ms, 33.4MB)
// 테스트 2 〉	통과 (0.12ms, 33.5MB)
// 테스트 3 〉	통과 (0.14ms, 33.5MB)
// 테스트 4 〉	통과 (0.14ms, 33.6MB)
// 테스트 5 〉	통과 (0.12ms, 33.4MB)
// 테스트 6 〉	통과 (0.04ms, 33.4MB)
// 테스트 7 〉	통과 (0.12ms, 33.6MB)
// 테스트 8 〉	통과 (0.13ms, 33.4MB)
// 테스트 9 〉	통과 (0.19ms, 33.6MB)
// 테스트 10 〉	통과 (0.16ms, 33.5MB)
// 테스트 11 〉	통과 (0.13ms, 33.4MB)
// 테스트 12 〉	통과 (0.19ms, 33.4MB)
// 테스트 13 〉	통과 (0.17ms, 33.5MB)
// 테스트 14 〉	통과 (0.19ms, 33.5MB)
// 테스트 15 〉	통과 (0.07ms, 33.5MB)
// 테스트 16 〉	통과 (0.04ms, 33.5MB)
// 테스트 17 〉	통과 (0.13ms, 33.5MB)
// 테스트 18 〉	통과 (0.04ms, 33.5MB)
// 효율성  테스트
// 테스트 1 〉	통과 (0.26ms, 33.5MB)
// 테스트 2 〉	통과 (0.32ms, 33.2MB)
// 테스트 3 〉	통과 (0.20ms, 33.4MB)
// 테스트 4 〉	통과 (0.24ms, 33.4MB)
// 테스트 5 〉	통과 (0.24ms, 33.6MB)
// 테스트 6 〉	통과 (0.32ms, 33.2MB)