function solution(n) {
    // K 칸 점프 => 건전지 씀
    // 순간이동 => 현 거리 x 2
    // n 이 짝수면 계속 절반으로 줄여주기

    let battery = 1

    //     while (n !== battery) {
    //         if (n % 2 === 0) {
    //             n = n / 2
    //         } else {
    //             n -= 1
    //             battery += 1
    //         }
    //     }

    while (n !== 1) {
        if (n % 2 === 0) {
            n = n / 2
        } else {
            n -= 1
            battery += 1
        }
    }
    return battery
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.03ms, 33.5MB)
// 테스트 2 〉	통과 (0.03ms, 33.5MB)
// 테스트 3 〉	통과 (0.03ms, 33.4MB)
// 테스트 4 〉	통과 (0.03ms, 33.6MB)
// 테스트 5 〉	통과 (0.03ms, 33.5MB)
// 테스트 6 〉	통과 (0.03ms, 33.5MB)
// 테스트 7 〉	통과 (0.04ms, 33.4MB)
// 테스트 8 〉	통과 (0.05ms, 33.5MB)
// 테스트 9 〉	통과 (0.03ms, 33.5MB)
// 테스트 10 〉	통과 (0.03ms, 33.5MB)
// 테스트 11 〉	통과 (0.04ms, 33.4MB)
// 테스트 12 〉	통과 (0.03ms, 33.5MB)
// 테스트 13 〉	통과 (0.03ms, 33.5MB)
// 테스트 14 〉	통과 (0.06ms, 33.5MB)
// 테스트 15 〉	통과 (0.04ms, 33.5MB)
// 테스트 16 〉	통과 (0.04ms, 33.4MB)
// 테스트 17 〉	통과 (0.04ms, 33.4MB)
// 테스트 18 〉	통과 (0.03ms, 33.4MB)
// 효율성  테스트
// 테스트 1 〉	통과 (0.04ms, 33.4MB)
// 테스트 2 〉	통과 (0.05ms, 33MB)
// 테스트 3 〉	통과 (0.05ms, 33.5MB)
// 테스트 4 〉	통과 (0.03ms, 33.3MB)
// 테스트 5 〉	통과 (0.03ms, 33.3MB)
// 테스트 6 〉	통과 (0.05ms, 33.3MB)
// 테스트 7 〉	통과 (0.04ms, 32.9MB)
// 테스트 8 〉	통과 (0.03ms, 33.3MB)
// 테스트 9 〉	통과 (0.03ms, 33.4MB)
// 테스트 10 〉	통과 (0.03ms, 33.4MB)